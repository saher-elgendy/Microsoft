{"version":3,"sources":["redux/products/reducer.js","redux/user/reducer.js","redux/rootReducer.js","redux/products/actionTypes.js","redux/filters/reducer.js","redux/sort/reducer.js","redux/cart/reducer.js","redux/searchQuery/reducer.js","redux/store.js","util/AuthRoute.js","App.js","redux/products/action.js","serviceWorker.js","index.js","redux/user/actionTypes.js","firebase.js","redux/cart/actionTypes.js","redux/filters/actionTypes.js","redux/sort/actionTypes.js","redux/searchQuery/actionTypes.js","redux/user/action.js"],"names":["intitialState","products","productOfTheWeek","initialState","authenticated","combineReducers","state","action","type","payload","filters","ADD_FILTER","REMOVE_FILTER","filter","f","sortBy","UPDATE_SORTBY","cartProducts","ADD_TO_CART","REMOVE_FROM_CART","product","id","user","SET_AUTHENTICATED","SET_UNAUTHENTICATED","query","UPDATE_QUERY","middleware","thunk","createStore","rootReducer","applyMiddleware","connect","Component","component","rest","props","path","Home","lazy","Categories","Products","Product","Signin","Signup","fetchProducts","dispatch","axios","get","then","res","data","catch","err","console","log","auth","onAuthStateChanged","store","useEffect","fallback","Spinner","variant","as","className","animation","role","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","storage","setAuthenticated","token","uid","localStorage","setItem","setUnAuthenticated","history","currentUser","delete","message"],"mappings":"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","file":"static/js/main.0c35a11d.chunk.js","sourcesContent":["import { FETCH_PRODUCTS } from './actionTypes';\r\n\r\nconst intitialState = {\r\n    products: [],\r\n    productOfTheWeek: {}\r\n}\r\n\r\nexport default (state = intitialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_PRODUCTS:\r\n            return {\r\n                products: action.payload.products,\r\n                productOfTheWeek: action.payload.productOfTheWeek\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_AUTHENTICATED, SET_UNAUTHENTICATED } from './actionTypes';\r\n\r\nconst initialState = {\r\n    authenticated: false\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_AUTHENTICATED:\r\n            return {\r\n                ...state,\r\n                authenticated: true\r\n            }\r\n        case SET_UNAUTHENTICATED:\r\n            return {\r\n                authenticated: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport cartReducer from './cart/reducer';\r\nimport filtersReducer from './filters/reducer';\r\nimport productsReducer from './products/reducer';\r\nimport sortReducer from './sort/reducer';\r\nimport userReducer from './user/reducer';\r\nimport queryReducer from './searchQuery/reducer';\r\n\r\nexport default combineReducers({\r\n    products: productsReducer,\r\n    filters: filtersReducer,\r\n    sortBy: sortReducer,\r\n    cartProducts: cartReducer,\r\n    user: userReducer,\r\n    query: queryReducer\r\n});","export const FETCH_PRODUCTS = 'FETCH_PRODUCTS';\r\n","import { ADD_FILTER, REMOVE_FILTER } from './actionTypes';\r\n\r\n\r\nexport default (state = [], action) => {\r\n    switch (action.type) {\r\n        case ADD_FILTER:\r\n            return [...state, action.payload];\r\n\r\n        case REMOVE_FILTER:\r\n            return state.filter(f => f !== action.payload);\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { UPDATE_SORTBY } from './actionTypes';\r\n\r\n\r\nexport default (state = '', action) => {\r\n    switch (action.type) {\r\n        case UPDATE_SORTBY:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { ADD_TO_CART, REMOVE_FROM_CART } from './actionTypes';\r\n\r\n\r\nexport default (state = [], action) => {\r\n    switch(action.type) {\r\n        case ADD_TO_CART:\r\n            return action.payload;\r\n\r\n        case REMOVE_FROM_CART:\r\n            return state.filter(product => product.id !== action.payload.id);\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { UPDATE_QUERY } from \"./actionTypes\";\r\n\r\n\r\nexport default (state = '', action) => {\r\n    switch (action.type) {\r\n        case UPDATE_QUERY:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst middleware = [thunk];\r\n\r\nexport default createStore(rootReducer, applyMiddleware(...middleware));","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\n\r\nconst AuthRoute = ({ component: Component, authenticated,  ...rest }) => {\r\n    return (\r\n        <Route\r\n            component={props => authenticated ? <Redirect path=\"/\" /> : <Component {...props} />}\r\n            {...rest}\r\n        />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    authenticated: state.user.authenticated\r\n})\r\nexport default connect(mapStateToProps)(AuthRoute);\r\n","import React, { Suspense, lazy, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { auth } from './firebase';\r\nimport './index.css';\r\nimport { fetchProducts } from './redux/products/action';\r\nimport store from './redux/store';\r\nimport { SET_AUTHENTICATED, SET_UNAUTHENTICATED } from './redux/user/actionTypes';\r\nimport AuthRoute from './util/AuthRoute';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { setAuthenticated } from './redux/user/action';\r\nimport jwt_decode from 'jwt-decode'\r\n//lazy loading pages\r\nconst Home = lazy(() => import('./pages/home'));\r\nconst Categories = lazy(() => import('./pages/categories'));\r\nconst Products = lazy(() => import('./pages/products'));\r\nconst Product = lazy(() => import('./pages/product'));\r\nconst Signin = lazy(() => import('./pages/sign_in'));\r\nconst Signup = lazy(() => import('./pages/sign_up'));\r\n\r\n\r\n// const token = localStorage.getItem('FBIdToken')\r\n\r\n// if (token) {\r\n//   store.dispatch({ type: SET_AUTHENTICATED })\r\n// } else {\r\n//   store.dispatch({ type: SET_UNAUTHENTICATED })\r\n// }\r\n\r\n\r\nfunction App({ fetchProducts, authenticated }) {\r\n\r\n  auth.onAuthStateChanged(user => {\r\n    if (user) {\r\n      store.dispatch({ type: SET_AUTHENTICATED })\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetchProducts();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <Suspense fallback={\r\n        <Spinner\r\n          variant=\"primary\"\r\n          as=\"span\"\r\n          className=\"app-spinner\"\r\n          animation=\"border\"\r\n          role=\"status\"\r\n        ></Spinner>\r\n      }>\r\n        <Switch>\r\n          <>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/categories\" component={Categories} />\r\n            <Route path=\"/products\" component={Products} />\r\n            <AuthRoute path=\"/sign_in\" component={Signin} />\r\n            <AuthRoute path=\"/sign_up\" component={Signup} />\r\n            <Route path=\"/week_product\" component={Product} />\r\n          </>\r\n        </Switch>\r\n      </Suspense>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    authenticated: state.user.authenticated\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchProducts })(App);\r\n","import axios from 'axios';\r\nimport { FETCH_PRODUCTS } from './actionTypes';\r\n\r\n\r\nexport const fetchProducts = () => dispatch => {\r\n   axios.get('https://api.jsonbin.io/b/5f543ba04d8ce4111389a45f')\r\n        .then(res => {\r\n            dispatch({\r\n                type: FETCH_PRODUCTS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            return console.log(err);\r\n        });\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n\r\n","export const SET_AUTHENTICATED = 'SET_AUTHENTICATED';\r\nexport const SET_UNAUTHENTICATED = 'SET_UNAUTHENTICATED';","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAlXMUqcMzMLuqY7-G913cvmVXKo1BmylE\",\r\n    authDomain: \"fir-2758c.firebaseapp.com\",\r\n    databaseURL: \"https://fir-2758c.firebaseio.com\",\r\n    projectId: \"fir-2758c\",\r\n    storageBucket: \"fir-2758c.appspot.com\",\r\n    messagingSenderId: \"647234610225\",\r\n    appId: \"1:647234610225:web:b96515c87b1a1b77b5e110\",\r\n    measurementId: \"G-MKBT9RSETV\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst auth = firebase.auth();\r\nconst db = firebase.database();\r\nconst storage = firebase.storage();\r\n\r\nexport {auth, db, storage};\r\n\r\n","export const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\n","export const ADD_FILTER = 'ADD_FILTER';\r\nexport const REMOVE_FILTER = 'REMOVE_FILTER';","export const UPDATE_SORTBY = 'UPDATE_SORTBY';","export const UPDATE_QUERY = 'UPDATE_QUERY';","import { auth } from '../../firebase';\r\nimport { removeAuthToken } from '../../util/Auth';\r\nimport { SET_AUTHENTICATED, SET_UNAUTHENTICATED } from './actionTypes';\r\n\r\n\r\nexport const setAuthenticated = (user) => {\r\n    //keep presistent login of the user\r\n    //stor user uid in local storage\r\n    const token = user.user.uid;\r\n    localStorage.setItem('FBIdToken', token)\r\n    return {\r\n        type: SET_AUTHENTICATED,\r\n    }\r\n}\r\n\r\nexport const setUnAuthenticated = (history) => dispatch => {\r\n    const user = auth.currentUser;\r\n\r\n    user.delete().then(() => {\r\n        dispatch({ type: SET_UNAUTHENTICATED})\r\n    })\r\n    .catch(err => console.log(err.message))\r\n\r\n   \r\n}"],"sourceRoot":""}